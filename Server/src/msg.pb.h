// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace MyStruct {
class EMAIL;
struct EMAILDefaultTypeInternal;
extern EMAILDefaultTypeInternal _EMAIL_default_instance_;
class SESSION;
struct SESSIONDefaultTypeInternal;
extern SESSIONDefaultTypeInternal _SESSION_default_instance_;
}  // namespace MyStruct
PROTOBUF_NAMESPACE_OPEN
template<> ::MyStruct::EMAIL* Arena::CreateMaybeMessage<::MyStruct::EMAIL>(Arena*);
template<> ::MyStruct::SESSION* Arena::CreateMaybeMessage<::MyStruct::SESSION>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MyStruct {

// ===================================================================

class EMAIL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyStruct.EMAIL) */ {
 public:
  inline EMAIL() : EMAIL(nullptr) {}
  ~EMAIL() override;
  explicit PROTOBUF_CONSTEXPR EMAIL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EMAIL(const EMAIL& from);
  EMAIL(EMAIL&& from) noexcept
    : EMAIL() {
    *this = ::std::move(from);
  }

  inline EMAIL& operator=(const EMAIL& from) {
    CopyFrom(from);
    return *this;
  }
  inline EMAIL& operator=(EMAIL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EMAIL& default_instance() {
    return *internal_default_instance();
  }
  static inline const EMAIL* internal_default_instance() {
    return reinterpret_cast<const EMAIL*>(
               &_EMAIL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EMAIL& a, EMAIL& b) {
    a.Swap(&b);
  }
  inline void Swap(EMAIL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EMAIL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EMAIL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EMAIL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EMAIL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EMAIL& from) {
    EMAIL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EMAIL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyStruct.EMAIL";
  }
  protected:
  explicit EMAIL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kReceiverFieldNumber = 2,
    kSubjectFieldNumber = 3,
    kDateFieldNumber = 4,
    kContentFieldNumber = 5,
  };
  // required string sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // required string receiver = 2;
  bool has_receiver() const;
  private:
  bool _internal_has_receiver() const;
  public:
  void clear_receiver();
  const std::string& receiver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver();
  PROTOBUF_NODISCARD std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // required string subject = 3;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // required string date = 4;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const std::string& date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // required string content = 5;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:MyStruct.EMAIL)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SESSION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyStruct.SESSION) */ {
 public:
  inline SESSION() : SESSION(nullptr) {}
  ~SESSION() override;
  explicit PROTOBUF_CONSTEXPR SESSION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SESSION(const SESSION& from);
  SESSION(SESSION&& from) noexcept
    : SESSION() {
    *this = ::std::move(from);
  }

  inline SESSION& operator=(const SESSION& from) {
    CopyFrom(from);
    return *this;
  }
  inline SESSION& operator=(SESSION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SESSION& default_instance() {
    return *internal_default_instance();
  }
  static inline const SESSION* internal_default_instance() {
    return reinterpret_cast<const SESSION*>(
               &_SESSION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SESSION& a, SESSION& b) {
    a.Swap(&b);
  }
  inline void Swap(SESSION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SESSION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SESSION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SESSION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SESSION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SESSION& from) {
    SESSION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SESSION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyStruct.SESSION";
  }
  protected:
  explicit SESSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFlagFieldNumber = 1,
    kSocketFdFieldNumber = 2,
  };
  // required int32 login_flag = 1;
  bool has_login_flag() const;
  private:
  bool _internal_has_login_flag() const;
  public:
  void clear_login_flag();
  int32_t login_flag() const;
  void set_login_flag(int32_t value);
  private:
  int32_t _internal_login_flag() const;
  void _internal_set_login_flag(int32_t value);
  public:

  // required int32 socket_fd = 2;
  bool has_socket_fd() const;
  private:
  bool _internal_has_socket_fd() const;
  public:
  void clear_socket_fd();
  int32_t socket_fd() const;
  void set_socket_fd(int32_t value);
  private:
  int32_t _internal_socket_fd() const;
  void _internal_set_socket_fd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:MyStruct.SESSION)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t login_flag_;
    int32_t socket_fd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EMAIL

// required string sender = 1;
inline bool EMAIL::_internal_has_sender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EMAIL::has_sender() const {
  return _internal_has_sender();
}
inline void EMAIL::clear_sender() {
  _impl_.sender_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EMAIL::sender() const {
  // @@protoc_insertion_point(field_get:MyStruct.EMAIL.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EMAIL::set_sender(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyStruct.EMAIL.sender)
}
inline std::string* EMAIL::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:MyStruct.EMAIL.sender)
  return _s;
}
inline const std::string& EMAIL::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void EMAIL::_internal_set_sender(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* EMAIL::_internal_mutable_sender() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sender_.Mutable(GetArenaForAllocation());
}
inline std::string* EMAIL::release_sender() {
  // @@protoc_insertion_point(field_release:MyStruct.EMAIL.sender)
  if (!_internal_has_sender()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sender_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EMAIL::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyStruct.EMAIL.sender)
}

// required string receiver = 2;
inline bool EMAIL::_internal_has_receiver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EMAIL::has_receiver() const {
  return _internal_has_receiver();
}
inline void EMAIL::clear_receiver() {
  _impl_.receiver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EMAIL::receiver() const {
  // @@protoc_insertion_point(field_get:MyStruct.EMAIL.receiver)
  return _internal_receiver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EMAIL::set_receiver(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.receiver_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyStruct.EMAIL.receiver)
}
inline std::string* EMAIL::mutable_receiver() {
  std::string* _s = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:MyStruct.EMAIL.receiver)
  return _s;
}
inline const std::string& EMAIL::_internal_receiver() const {
  return _impl_.receiver_.Get();
}
inline void EMAIL::_internal_set_receiver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.receiver_.Set(value, GetArenaForAllocation());
}
inline std::string* EMAIL::_internal_mutable_receiver() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.receiver_.Mutable(GetArenaForAllocation());
}
inline std::string* EMAIL::release_receiver() {
  // @@protoc_insertion_point(field_release:MyStruct.EMAIL.receiver)
  if (!_internal_has_receiver()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.receiver_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_.IsDefault()) {
    _impl_.receiver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EMAIL::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.receiver_.SetAllocated(receiver, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_.IsDefault()) {
    _impl_.receiver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyStruct.EMAIL.receiver)
}

// required string subject = 3;
inline bool EMAIL::_internal_has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EMAIL::has_subject() const {
  return _internal_has_subject();
}
inline void EMAIL::clear_subject() {
  _impl_.subject_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EMAIL::subject() const {
  // @@protoc_insertion_point(field_get:MyStruct.EMAIL.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EMAIL::set_subject(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyStruct.EMAIL.subject)
}
inline std::string* EMAIL::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:MyStruct.EMAIL.subject)
  return _s;
}
inline const std::string& EMAIL::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void EMAIL::_internal_set_subject(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* EMAIL::_internal_mutable_subject() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* EMAIL::release_subject() {
  // @@protoc_insertion_point(field_release:MyStruct.EMAIL.subject)
  if (!_internal_has_subject()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.subject_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EMAIL::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyStruct.EMAIL.subject)
}

// required string date = 4;
inline bool EMAIL::_internal_has_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EMAIL::has_date() const {
  return _internal_has_date();
}
inline void EMAIL::clear_date() {
  _impl_.date_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& EMAIL::date() const {
  // @@protoc_insertion_point(field_get:MyStruct.EMAIL.date)
  return _internal_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EMAIL::set_date(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyStruct.EMAIL.date)
}
inline std::string* EMAIL::mutable_date() {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:MyStruct.EMAIL.date)
  return _s;
}
inline const std::string& EMAIL::_internal_date() const {
  return _impl_.date_.Get();
}
inline void EMAIL::_internal_set_date(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.date_.Set(value, GetArenaForAllocation());
}
inline std::string* EMAIL::_internal_mutable_date() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.date_.Mutable(GetArenaForAllocation());
}
inline std::string* EMAIL::release_date() {
  // @@protoc_insertion_point(field_release:MyStruct.EMAIL.date)
  if (!_internal_has_date()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.date_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EMAIL::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.date_.SetAllocated(date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyStruct.EMAIL.date)
}

// required string content = 5;
inline bool EMAIL::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EMAIL::has_content() const {
  return _internal_has_content();
}
inline void EMAIL::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& EMAIL::content() const {
  // @@protoc_insertion_point(field_get:MyStruct.EMAIL.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EMAIL::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyStruct.EMAIL.content)
}
inline std::string* EMAIL::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:MyStruct.EMAIL.content)
  return _s;
}
inline const std::string& EMAIL::_internal_content() const {
  return _impl_.content_.Get();
}
inline void EMAIL::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* EMAIL::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* EMAIL::release_content() {
  // @@protoc_insertion_point(field_release:MyStruct.EMAIL.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EMAIL::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyStruct.EMAIL.content)
}

// -------------------------------------------------------------------

// SESSION

// required int32 login_flag = 1;
inline bool SESSION::_internal_has_login_flag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SESSION::has_login_flag() const {
  return _internal_has_login_flag();
}
inline void SESSION::clear_login_flag() {
  _impl_.login_flag_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t SESSION::_internal_login_flag() const {
  return _impl_.login_flag_;
}
inline int32_t SESSION::login_flag() const {
  // @@protoc_insertion_point(field_get:MyStruct.SESSION.login_flag)
  return _internal_login_flag();
}
inline void SESSION::_internal_set_login_flag(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.login_flag_ = value;
}
inline void SESSION::set_login_flag(int32_t value) {
  _internal_set_login_flag(value);
  // @@protoc_insertion_point(field_set:MyStruct.SESSION.login_flag)
}

// required int32 socket_fd = 2;
inline bool SESSION::_internal_has_socket_fd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SESSION::has_socket_fd() const {
  return _internal_has_socket_fd();
}
inline void SESSION::clear_socket_fd() {
  _impl_.socket_fd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SESSION::_internal_socket_fd() const {
  return _impl_.socket_fd_;
}
inline int32_t SESSION::socket_fd() const {
  // @@protoc_insertion_point(field_get:MyStruct.SESSION.socket_fd)
  return _internal_socket_fd();
}
inline void SESSION::_internal_set_socket_fd(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.socket_fd_ = value;
}
inline void SESSION::set_socket_fd(int32_t value) {
  _internal_set_socket_fd(value);
  // @@protoc_insertion_point(field_set:MyStruct.SESSION.socket_fd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MyStruct

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
